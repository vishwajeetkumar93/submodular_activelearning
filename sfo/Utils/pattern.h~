#ifndef PATTERN_H
#define PATTERN_H
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <sys/stat.h>
#include <sys/types.h>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <string>


#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "math.h"
#include "time.h"
#include <stdarg.h>
#include <assert.h>
#include <queue>
using namespace std;

class Triplet{
	public:
	int instanceId;
	int sid;
	int beginPos;
	int endPos;
	//extract ids from comma separated string e.g. 280,15,21 
	Triplet(string);
	string tostring();
	

};

Triplet::Triplet(string str)
	{
		std::stringstream ss(str);
		ss>>sid;
		//if(ss.peek==',')
		ss.ignore();
		ss>>beginPos;
		ss.ignore();
		ss>>endPos;
		//cout<<this->tostring()<<endl;
	}
	
string Triplet::tostring()
	{
		return std::to_string(sid)+","+std::to_string(beginPos)+","+std::to_string(endPos);
	}
	
	
class Pattern{
	public:
	std::string patternText;
	vector<Triplet> occurances;
	Pattern(string );
	string tostring();
	double getModularCost();

};

Pattern::Pattern(string str){
		patternText=str;
		occurances = vector<Triplet>();
	}
	
	string Pattern::tostring()
	{
		std::string str=patternText;
		for(std::vector<Triplet>::iterator it = occurances.begin(); it != occurances.end(); ++it) {
			str=str+" "+(*it).tostring();
		}
		return str;
	}
	
	double Pattern::getModularCost(){
		double cost=0; //pattern cose
		int countNP = 0; //NP ka count in pattern
		int countVP = 0;//NP ka count in pattern
		std::stringstream s(patternText);
		string tok;
		int len=0;
		while(s>>tok){
			if(tok.compare("NP")==0)++countNP;
			if(tok.compare("VP")==0)++countVP;
			len++;
		}
		// these cost are just to avoid pattern that contain VP
		cost=100000; //bydefault cost is very high previous 1000000
		// only atmost one NP and VP is allowed. 
		if(countNP+countVP == 0 && len > 1 ){
			cost=1; //koi np vp nahi ho length ek se jyada ho to cost 1
		}
		else if((countNP+countVP) == 1 && len > 4){
			cost=1; //previously 100000
			//&& len > 5
		}
		else if((countNP+countVP) == 2 && len > 5){
			cost=1; //previously 100000
		}
		
		//cost=1+(countNP*1)+(countVP*1000000);
		//cout <<patternText<<" NP: "<<countNP<<" VP: "<<countVP<<endl;
		return cost; 
	}



#endif

